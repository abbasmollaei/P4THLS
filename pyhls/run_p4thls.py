import json
import argparse
import os
from sys_utils import *
from gen_header import generate_headers
from gen_metadata import generate_metadata
from gen_packet import generate_packet
from gen_parser import generate_parser
from gen_deparser import generate_deparser
from gen_actions import generate_actions
from gen_tables import generate_tables
from gen_control import generate_control
from gen_common import generate_common
from gen_main import generate_main
from gen_driver import generate_driver


def main():
    parser = argparse.ArgumentParser(description="P4THLS: P4 to Templated HLS")
    parser.add_argument("p4src", help="The original P4 source file")
    parser.add_argument("json", help="JSON file path generated by the P4 compiler (p4c)")
    parser.add_argument("--builddir", type=str, help="Build directory", default='./src') 
    parser.add_argument("--mtype", type=str, help="Memory Type [bram|uram|lutram]", default='bram') 
    parser.add_argument("--bwidth", type=str, help="AXI Bus Width [64|128|256|512|1024]", default='64') 
    parser.add_argument("--inport", type=str, help="Number of input AXI port [1-4]", default='1') 
    parser.add_argument("--outport", type=str, help="Number of output AXI port [1-4]", default='1') 
    args = parser.parse_args()

    p4_path = os.path.abspath(args.p4src)
    if os.path.isfile(p4_path):
        print(f'P4 file: {p4_path}')
    else:
        print(f'{p4_path} does not exist!')
        return

    json_path = os.path.abspath(args.json)
    if os.path.isfile(json_path):
        print(f'JSON file: {json_path}')
    else:
        print(f'{json_path} does not exist!')
        return

    src_dir = os.path.dirname(os.path.abspath(__file__))
    build_dir = os.path.abspath(args.builddir)
    info_dir = f'{build_dir}/info'
    
    clean_env(build_dir)
    make_dir(build_dir)
    print(f'Build directory: {build_dir}')

    make_dir(info_dir)
    set_info_dir(info_dir)
    print(f'Info directory: {info_dir}')

    p4_ctx = read_file(p4_path)
    json_ctx = read_json(json_path)

    mtype = args.mtype
    bwidth = args.bwidth
    inport = int(args.inport)
    outport = int(args.outport)

    print(mtype)
    print(bwidth)
    print(inport)
    print(outport)

    generate_headers(json_ctx, build_dir)
    generate_metadata(json_ctx, build_dir)
    generate_packet(build_dir)
    generate_parser(json_ctx, build_dir, inport)
    generate_deparser(json_ctx, build_dir, outport)
    generate_actions(p4_ctx, json_ctx, build_dir)
    generate_tables(p4_ctx, json_ctx, build_dir, src_dir)
    generate_control(p4_ctx, json_ctx, build_dir, src_dir)
    generate_common(build_dir, inport, outport, bwidth, mtype)
    generate_main(build_dir, inport, outport)
    generate_driver(build_dir)


if __name__ == "__main__":
    main()
 