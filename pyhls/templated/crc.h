#define CRC16_POLY 0x1021  // CRC-16-CCITT polynomial

// Precomputed lookup table for 8-bit chunks using CRC-16-CCITT
const ap_uint<16> crc16_table[256] = {
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7, 
    0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
    0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
    0x9339, 0x8318, 0xB37B, 0xA35A, 0xD3BD, 0xC39C, 0xF3FF, 0xE3DE,
    0x2462, 0x3443, 0x0420, 0x1401, 0x64E6, 0x74C7, 0x44A4, 0x5485,
    0xA56A, 0xB54B, 0x8528, 0x9509, 0xE5EE, 0xF5CF, 0xC5AC, 0xD58D,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76D7, 0x66F6, 0x5695, 0x46B4,
    0xB75B, 0xA77A, 0x9719, 0x8738, 0xF7DF, 0xE7FE, 0xD79D, 0xC7BC,
    0x48C4, 0x58E5, 0x6886, 0x78A7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xC9CC, 0xD9ED, 0xE98E, 0xF9AF, 0x8948, 0x9969, 0xA90A, 0xB92B,
    0x5AF5, 0x4AD4, 0x7AB7, 0x6A96, 0x1A71, 0x0A50, 0x3A33, 0x2A12,
    0xDBFD, 0xCBDC, 0xFBBF, 0xEB9E, 0x9B79, 0x8B58, 0xBB3B, 0xAB1A,
    0x6CA6, 0x7C87, 0x4CE4, 0x5CC5, 0x2C22, 0x3C03, 0x0C60, 0x1C41,
    0xEDAE, 0xFD8F, 0xCDEC, 0xDDCD, 0xAD2A, 0xBD0B, 0x8D68, 0x9D49,
    0x7E97, 0x6EB6, 0x5ED5, 0x4EF4, 0x3E13, 0x2E32, 0x1E51, 0x0E70,
    0xFF9F, 0xEFBE, 0xDFDD, 0xCFFC, 0xBF1B, 0xAF3A, 0x9F59, 0x8F78,
    0x9188, 0x81A9, 0xB1CA, 0xA1EB, 0xD10C, 0xC12D, 0xF14E, 0xE16F,
    0x1080, 0x00A1, 0x30C2, 0x20E3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83B9, 0x9398, 0xA3FB, 0xB3DA, 0xC33D, 0xD31C, 0xE37F, 0xF35E,
    0x02B1, 0x1290, 0x22F3, 0x32D2, 0x4235, 0x5214, 0x6277, 0x7256,
    0xB5EA, 0xA5CB, 0x95A8, 0x8589, 0xF56E, 0xE54F, 0xD52C, 0xC50D,
    0x34E2, 0x24C3, 0x14A0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
    0xA7DB, 0xB7FA, 0x8799, 0x97B8, 0xE75F, 0xF77E, 0xC71D, 0xD73C,
    0x26D3, 0x36F2, 0x0691, 0x16B0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xD94C, 0xC96D, 0xF90E, 0xE92F, 0x99C8, 0x89E9, 0xB98A, 0xA9AB,
    0x5844, 0x4865, 0x7806, 0x6827, 0x18C0, 0x08E1, 0x3882, 0x28A3,
    0xCB7D, 0xDB5C, 0xEB3F, 0xFB1E, 0x8BF9, 0x9BD8, 0xABBB, 0xBB9A,
    0x4A75, 0x5A54, 0x6A37, 0x7A16, 0x0AF1, 0x1AD0, 0x2AB3, 0x3A92,
    0xFD2E, 0xED0F, 0xDD6C, 0xCD4D, 0xBDAA, 0xAD8B, 0x9DE8, 0x8DC9,
    0x7C26, 0x6C07, 0x5C64, 0x4C45, 0x3CA2, 0x2C83, 0x1CE0, 0x0CC1,
    0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
    0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
};

// Template function for CRC-16 hash, with variable input length and 8-bit parallelism
template<int BIT_WIDTH>
ap_uint<16> crc16_hash(ap_uint<BIT_WIDTH> data) {
    ap_uint<16> crc = 0xFFFF;  // Initial value

    // Calculate number of 8-bit chunks in the input data
    const int num_chunks = (BIT_WIDTH + 7) / 8;  // Round up to cover all bits

    // Process the input data 8 bits at a time
    for (int i = 0; i < num_chunks; i++) {
        #pragma HLS UNROLL
        ap_uint<8> chunk = data.range(BIT_WIDTH - 1 - (i * 8), BIT_WIDTH - 8 - (i * 8));
        crc = (crc << 8) ^ crc16_table[(crc >> 8) ^ chunk];
    }

    return crc;
}


#define CRC32_POLY 0x04C11DB7  // CRC-32 polynomial

// Precomputed lookup table for CRC-32
const ap_uint<32> crc32_table[256] = {
    0x00000000, 0x04C11DB7, 0x09823B6E, 0x0D4326D9, 0x130476DC, 0x17C56B6B, 0x1A864DB2, 0x1E475005,
    0x2608EDB8, 0x2249F00F, 0x2D2AE6D6, 0x292BFB61, 0x350C6B64, 0x314D76D3, 0x3C2E50AA, 0x382F4D1D,
    0x4C11DB70, 0x48D0C6C7, 0x45B3E01E, 0x41B2ED89, 0x5F95DD8C, 0x5BD4C01B, 0x5687E6C2, 0x52A6FBD5,
    0x6A1936B4, 0x6E583B03, 0x615B1DD0, 0x656A0067, 0x7B4D7062, 0x7F0C7DD5, 0x725F5B0C, 0x76AE56BB,
    0x9823B6E0, 0x9C32AB57, 0x91118D8E, 0x95D08639, 0xABF7F638, 0xAFA6EB8F, 0xA2C5CD56, 0xA6D4D0E1,
    0xB2B8D3C8, 0xB6A9CE7F, 0xB4E4F9D6, 0xB0F5E476, 0xCE4A2B73, 0xCA5B36C4, 0xC73A1A1D, 0xC33B07AA,
    0xD4C8B5E0, 0xD0D9A855, 0xDDAAAE8C, 0xD9BB933B, 0xEFA8D88E, 0xEBB9C53D, 0xE6DAF3F4, 0xE2CB0E43,
    0xF3A3BBAA, 0xF7B2A61D, 0xF8F195C4, 0xFCE08A73, 0xE8C73976, 0xE4D636C1, 0xE9B51718, 0xE5A40A4F,
    0x77F7C5D0, 0x73E6D860, 0x7E95FEE9, 0x7AB4E354, 0x64B3A86E, 0x60A2B5D9, 0x6DB1B7C0, 0x69A0A8B5,
    0x5BC03B9C, 0x5FF1302B, 0x52D205B2, 0x56C31905, 0x48D42A7E, 0x4CC52529, 0x41B666A0, 0x45A76B17,
    0xC4E8B3E0, 0xC0F9AE57, 0xCDAA8D8E, 0xC9BB8039, 0xD7DCD75A, 0xD3CDEBCF, 0xD6C10A16, 0xD2D012A1,
    0xE8D30260, 0xE4C200D7, 0xE9A2270E, 0xED9B3A59, 0xF3BC1D7A, 0xF7AD003D, 0xF2D00DC4, 0xF6C10993,
    0xA0BCE9E0, 0xA4ADFF57, 0xA9DE8C8E, 0xADD61B39, 0xB3E5385A, 0xB7F53FCF, 0xBA95A11D, 0xBE842D9A,
    0xF1D57B64, 0xF5C446D3, 0xF8956C0A, 0xFCA6513D, 0xE8E62F1E, 0xECD718E9, 0xE5D46F10, 0xE1C547A5,
    0x8B2D7C90, 0x8F3C6127, 0x825F1AB4, 0x865E0703, 0x983E65A2, 0x9C2F7815, 0x914C5E8C, 0x954D463B,
    0xA021C3A0, 0xA427D114, 0xA65C6E6F, 0xA25778D8, 0xBC57A3C3, 0xB86E8D74, 0xB434877D, 0xB0256A0A,
    0x58E7B4A0, 0x5CE6A910, 0x51B7C680, 0x55A6DB37, 0x4BAA1914, 0x4FAA78A5, 0x42A40C1C, 0x46B56F4B,
    0x8C6E3DB8, 0x886D203F, 0x856016C2, 0x81414DF5, 0xF988D76E, 0xFD89CA19, 0xF0A8C4B0, 0xF4A9F1E7,
    0xDAB03E88, 0xDEB0293F, 0xD3B339C6, 0xD7B25D71, 0xC9C14812, 0xCDC06A75, 0xC0E1B048, 0xC4F02B5F,
    0x4C4A66A0, 0x484B7317, 0x454A1B80, 0x414B0E37, 0x3F370D10, 0x3B3620A7, 0x36374D2E, 0x32375499,
    0x53F7A29C, 0x57F6B72B, 0x5A4D2058, 0x5E4C3DE4, 0x63C5CA2F, 0x67C4D79A, 0x62D3D511, 0x66D2C8A6,
    0xB8C8B9A0, 0xBCC9A418, 0xB3C87861, 0xB7C970D6, 0xC50E7B0D, 0xC90F66BA, 0xC42C5413, 0xC82D49A4,
    0xF89E89D0, 0xFC9F8C67, 0xF1FCA846, 0xF5FDAD91, 0xD13A2C0A, 0xD53B21BD, 0xD0342206, 0xD4342F51
};

// Template function for CRC-32 hash, with variable input length and 8-bit parallelism
template<int BIT_WIDTH>
ap_uint<32> crc32_hash(ap_uint<BIT_WIDTH> data) {
    ap_uint<32> crc = 0xFFFFFFFF;  // Initial value

    // Calculate number of 8-bit chunks in the input data
    const int num_chunks = (BIT_WIDTH + 7) / 8;  // Round up to cover all bits

    // Process the input data 8 bits at a time
    for (int i = 0; i < num_chunks; i++) {
        // Extract the current 8-bit chunk
        ap_uint<8> chunk = data.range((i + 1) * 8 - 1, i * 8);
        // Update CRC using the precomputed table
        crc = (crc >> 8) ^ crc32_table[(crc ^ chunk) & 0xFF];
    }

    return ~crc;  // Final XOR for CRC-32
}

